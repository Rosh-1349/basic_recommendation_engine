# -*- coding: utf-8 -*-
"""Recommendation system.ipynb

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/drive/16qsIpONqzFqZeoRc3Kk917fwmrppxO9g
"""

import pandas as pd

data={
    "movie 1":[4,5,None],
    "movie 2":[3,None,5],
    "movie 3":[None,4,3]
}

df=pd.DataFrame(data,index=["user 1","user 2","user 3"])

df

df=df.fillna(df.mean())

df

from sklearn.metrics.pairwise import cosine_similarity

simil=cosine_similarity(df)

import numpy as np

sim_df=pd.DataFrame(simil,columns=df.index,index=df.index)

sim_df

#999999999999999999999999999999999999999999999999999999999999999999999999999

# 22 july '25

import pandas as pd

from sklearn.metrics.pairwise import cosine_similarity

data={
    "users":["Alice","Alice","Alice","Bob","Bob","Charlie","Charlie","Charlie"],
    "Movie":["Avengers","Inception","Titanic","Avengers","Titanic","Inception","Titanic","Avatar"],
    "Rating":[5,4,4,5,5,4,5,5]
}

df=pd.DataFrame(data);
df

"""making user-item matrix

"""

user_movie_matrix=df.pivot_table(index="users",columns="Movie",values="Rating")
print(user_movie_matrix)

matrix_filled=user_movie_matrix.fillna(0)
matrix_filled

"""calculate similarity"""

user_similarity=cosine_similarity(matrix_filled)
similarity_df=pd.DataFrame(user_similarity,index=matrix_filled.index,columns=matrix_filled.index)
print(similarity_df)

def get_recommendations(user_name,user_similarity,rating_matrix):
  similar_users=user_similarity[user_name].drop(user_name)
  similar_users=similar_users.sort_values(ascending=False)
  user_ratings=rating_matrix.loc[user_name]
  unrated_movies=user_ratings[user_ratings==0].index#filter out movies with 0 ratings
  recommendation={}
  for movie in unrated_movies:
    weighted_sum=0
    sim_sum=0
    for sim_user,sim_score in similar_users.items():
      rating=rating_matrix.loc[sim_user,movie]
      if rating>0:
        weighted_sum+=sim_score*rating
        sim_sum+=sim_score
    if sim_sum>0:
      recommendation[movie]=weighted_sum/sim_sum
  sorted_recommendations=sorted(recommendation.items(),key=lambda x:x[1],reverse=True)
  return sorted_recommendations

recommendations_for_alice=get_recommendations('Alice',similarity_df,matrix_filled)
print("Recommendations for Alice:")
for movie,score in recommendations_for_alice:
  print(f"{movie}:{score:.2f}")

